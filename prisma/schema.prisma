generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model courses {
  id               String          @id
  title            String
  description      String
  shortDescription String
  duration         String
  difficulty       String
  category         String
  isFreeTier       Boolean         @default(false)
  prerequisites    String?
  learningOutcomes String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  lessons          lessons[]
  user_progress    user_progress[]
}

model lesson_progress {
  id             String        @id
  userProgressId String
  lessonId       String
  completed      Boolean       @default(false)
  completedAt    DateTime?
  timeSpent      Int           @default(0)
  lessons        lessons       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user_progress  user_progress @relation(fields: [userProgressId], references: [id], onDelete: Cascade)

  @@unique([userProgressId, lessonId])
}

model lessons {
  id              String            @id
  courseId        String
  title           String
  description     String?
  content         String
  orderIndex      Int
  duration        Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  lesson_progress lesson_progress[]
  courses         courses           @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user_progress {
  id                 String            @id
  userId             String
  courseId           String
  enrolledAt         DateTime          @default(now())
  lastAccessedAt     DateTime          @default(now())
  completedLessons   Int               @default(0)
  totalLessons       Int               @default(0)
  progressPercentage Int               @default(0)
  completedAt        DateTime?
  certificateEarned  Boolean           @default(false)
  lesson_progress    lesson_progress[]
  courses            courses           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  users              users             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model users {
  id                 String          @id
  email              String          @unique
  name               String?
  password           String?
  image              String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime
  subscriptionTier   String          @default("free")
  subscriptionStatus String          @default("inactive")
  stripeCustomerId   String?
  accounts           accounts[]
  sessions           sessions[]
  user_progress      user_progress[]
}

model EmailSubscriber {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  source      String?  // Where the email was collected from (homepage, agent-lee, etc.)
  subscribedAt DateTime @default(now())
  isActive    Boolean  @default(true)

  @@map("email_subscribers")
}
