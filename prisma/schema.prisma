generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model courses {
  id               String          @id
  title            String
  description      String
  shortDescription String
  duration         String
  difficulty       String
  category         String
  isFreeTier       Boolean         @default(false)
  prerequisites    String?
  learningOutcomes String
  price            Float?          // Course price for paid tiers
  featured         Boolean         @default(false)
  published        Boolean         @default(false)
  thumbnailUrl     String?
  instructorId     String?         // Reference to instructor
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  lessons          lessons[]
  user_progress    user_progress[]
  quizzes          quizzes[]
  assignments      assignments[]
  certificates     certificates[]
}

model lesson_progress {
  id             String        @id
  userProgressId String
  lessonId       String
  completed      Boolean       @default(false)
  completedAt    DateTime?
  timeSpent      Int           @default(0)
  lessons        lessons       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user_progress  user_progress @relation(fields: [userProgressId], references: [id], onDelete: Cascade)

  @@unique([userProgressId, lessonId])
}

model lessons {
  id              String            @id
  courseId        String
  title           String
  description     String?
  content         String
  orderIndex      Int
  duration        Int
  lessonType      String            @default("text") // text, video, quiz, assignment
  videoUrl        String?
  resources       String?           // JSON array of resources
  published       Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  lesson_progress lesson_progress[]
  courses         courses           @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user_progress {
  id                 String            @id
  userId             String
  courseId           String
  enrolledAt         DateTime          @default(now())
  lastAccessedAt     DateTime          @default(now())
  completedLessons   Int               @default(0)
  totalLessons       Int               @default(0)
  progressPercentage Int               @default(0)
  completedAt        DateTime?
  certificateEarned  Boolean           @default(false)
  lesson_progress    lesson_progress[]
  courses            courses           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  users              users             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model users {
  id                 String          @id
  email              String          @unique
  name               String?
  password           String?
  image              String?
  role               String          @default("student") // student, instructor, admin
  createdAt          DateTime        @default(now())
  updatedAt          DateTime
  subscriptionTier   String          @default("free")
  subscriptionStatus String          @default("inactive")
  stripeCustomerId   String?
  accounts           accounts[]
  sessions           sessions[]
  user_progress      user_progress[]
  quiz_submissions   quiz_submissions[]
  assignment_submissions assignment_submissions[]
  forum_topics       forum_topics[]
  forum_posts        forum_posts[]
  certificates       certificates[]
  learning_analytics learning_analytics[]
  subscription       subscriptions?
}

model EmailSubscriber {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  source      String?  // Where the email was collected from (homepage, agent-lee, etc.)
  subscribedAt DateTime @default(now())
  isActive    Boolean  @default(true)

  @@map("email_subscribers")
}

// Agent Lee Chat System
model ChatSession {
  id              String        @id @default(cuid())
  threadId        String        @unique
  userId          String?       // Optional - for authenticated users
  startTime       DateTime      @default(now())
  endTime         DateTime?
  lastActivity    DateTime      @default(now())
  messageCount    Int           @default(0)
  status          String        @default("active") // active, completed, inactive
  sessionData     String?       // JSON data for session context
  apiProvider     String        @default("openai")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  messages        ChatMessage[]
  analytics       SessionAnalytics[]

  @@map("chat_sessions")
}

model ChatMessage {
  id              String      @id @default(cuid())
  sessionId       String
  threadId        String      // For quick lookups
  messageIndex    Int         // Order in conversation
  role            String      // user, assistant, system
  content         String      // Message text
  imageData       String?     // Base64 image data
  websiteData     String?     // JSON website generation data
  codeData        String?     // JSON code generation data
  metadata        String?     // JSON metadata (response times, etc.)
  timestamp       DateTime    @default(now())

  // Relations
  session         ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
  @@index([threadId])
  @@index([sessionId, messageIndex])
}

model SessionAnalytics {
  id              String      @id @default(cuid())
  sessionId       String
  eventType       String      // message_sent, response_generated, image_created, etc.
  eventData       String?     // JSON event data
  responseTime    Int?        // Response time in milliseconds
  success         Boolean     @default(true)
  errorDetails    String?
  timestamp       DateTime    @default(now())

  // Relations
  session         ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("session_analytics")
  @@index([sessionId])
  @@index([eventType])
}

// Code Generation Tracking
model CodeGeneration {
  id              String      @id @default(cuid())
  sessionId       String?
  threadId        String?
  instruction     String
  model           String      @default("claude-sonnet-4-20250514")
  success         Boolean
  filesCreated    Int         @default(0)
  generationTime  Int         // milliseconds
  errorDetails    String?
  filesList       String?     // JSON array of created files
  timestamp       DateTime    @default(now())

  @@map("code_generations")
  @@index([sessionId])
  @@index([timestamp])
}

// Image Generation Tracking
model ImageGeneration {
  id              String      @id @default(cuid())
  sessionId       String?
  threadId        String?
  prompt          String
  model           String      @default("dall-e-3")
  success         Boolean
  generationTime  Int         // milliseconds
  imageUrl        String?
  errorDetails    String?
  timestamp       DateTime    @default(now())

  @@map("image_generations")
  @@index([sessionId])
  @@index([timestamp])
}

// RAG Knowledge Base
model KnowledgeBase {
  id              String      @id @default(cuid())
  title           String
  content         String      // Full text content
  summary         String?     // Summary for quick reference
  source          String?     // Source URL or file path
  category        String      @default("general")
  tags            String?     // JSON array of tags
  embeddings      String?     // JSON vector embeddings
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("knowledge_base")
  @@index([category])
  @@index([isActive])
}

// MCP Server Usage Tracking
model MCPUsage {
  id              String      @id @default(cuid())
  sessionId       String?
  threadId        String?
  serverId        String      // brave-search, file-system, github, etc.
  toolName        String      // web_search, news_search, read_file, etc.
  success         Boolean
  responseTime    Int         // milliseconds
  inputData       String?     // JSON input parameters
  outputData      String?     // JSON output data (truncated)
  errorDetails    String?
  timestamp       DateTime    @default(now())

  @@map("mcp_usage")
  @@index([serverId])
  @@index([timestamp])
  @@index([sessionId])
}

// Learning Interest Comments
model LearningComment {
  id          String   @id @default(cuid())
  comment     String
  email       String?  // Optional email for follow-up
  name        String?  // Optional name
  source      String   @default("homepage") // Where the comment was submitted from
  createdAt   DateTime @default(now())
  isActive    Boolean  @default(true)

  @@map("learning_comments")
  @@index([createdAt])
}

// Enhanced LMS Models

// Quizzes and Assessments
model quizzes {
  id              String            @id @default(cuid())
  courseId        String
  title           String
  description     String?
  passingScore    Int               @default(70)
  timeLimit       Int?              // Minutes
  attempts        Int               @default(3)
  published       Boolean           @default(false)
  orderIndex      Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  course          courses           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions       quiz_questions[]
  submissions     quiz_submissions[]

  @@map("quizzes")
}

model quiz_questions {
  id          String        @id @default(cuid())
  quizId      String
  question    String
  type        String        // multiple_choice, true_false, short_answer, essay
  options     String?       // JSON array for multiple choice
  correctAnswer String?     // Correct answer
  points      Int           @default(1)
  orderIndex  Int           @default(0)
  createdAt   DateTime      @default(now())
  quiz        quizzes       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     quiz_answers[]

  @@map("quiz_questions")
}

model quiz_submissions {
  id          String        @id @default(cuid())
  quizId      String
  userId      String
  score       Int           @default(0)
  totalPoints Int           @default(0)
  passed      Boolean       @default(false)
  attempt     Int           @default(1)
  timeSpent   Int?          // Minutes
  submittedAt DateTime      @default(now())
  quiz        quizzes       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user        users         @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     quiz_answers[]

  @@map("quiz_submissions")
  @@unique([quizId, userId, attempt])
}

model quiz_answers {
  id           String           @id @default(cuid())
  submissionId String
  questionId   String
  answer       String
  isCorrect    Boolean          @default(false)
  points       Int              @default(0)
  submission   quiz_submissions @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question     quiz_questions   @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("quiz_answers")
  @@unique([submissionId, questionId])
}

// Assignments and AI Grading
model assignments {
  id              String                @id @default(cuid())
  courseId        String
  title           String
  description     String
  instructions    String
  dueDate         DateTime?
  maxPoints       Int                   @default(100)
  allowLateSubmission Boolean           @default(true)
  published       Boolean               @default(false)
  orderIndex      Int                   @default(0)
  rubric          String?               // JSON rubric for AI grading
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  course          courses               @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions     assignment_submissions[]

  @@map("assignments")
}

model assignment_submissions {
  id              String      @id @default(cuid())
  assignmentId    String
  userId          String
  content         String      // Student submission
  files           String?     // JSON array of file URLs
  status          String      @default("submitted") // submitted, graded, returned
  score           Int?
  feedback        String?     // AI generated feedback
  aiGradeData     String?     // JSON with AI grading details
  submittedAt     DateTime    @default(now())
  gradedAt        DateTime?
  assignment      assignments @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  user            users       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("assignment_submissions")
  @@unique([assignmentId, userId])
}

// Message Board System
model forum_categories {
  id          String        @id @default(cuid())
  name        String
  description String?
  orderIndex  Int           @default(0)
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  topics      forum_topics[]

  @@map("forum_categories")
}

model forum_topics {
  id          String            @id @default(cuid())
  categoryId  String
  userId      String
  title       String
  content     String
  isPinned    Boolean           @default(false)
  isLocked    Boolean           @default(false)
  views       Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  category    forum_categories  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user        users             @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts       forum_posts[]

  @@map("forum_topics")
}

model forum_posts {
  id        String        @id @default(cuid())
  topicId   String
  userId    String
  content   String
  isAnswer  Boolean       @default(false) // Mark as best answer
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  topic     forum_topics  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user      users         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("forum_posts")
}

// Certification System
model certificates {
  id          String    @id @default(cuid())
  courseId    String
  userId      String
  template    String    // Certificate template design
  badgeData   String?   // JSON badge information
  issuedAt    DateTime  @default(now())
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  course      courses   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("certificates")
  @@unique([courseId, userId])
}

// Learning Analytics
model learning_analytics {
  id              String    @id @default(cuid())
  userId          String
  courseId        String?
  eventType       String    // login, lesson_start, lesson_complete, quiz_attempt, etc.
  eventData       String?   // JSON event data
  timeSpent       Int?      // Seconds
  performanceData String?   // JSON performance metrics
  timestamp       DateTime  @default(now())
  user            users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("learning_analytics")
  @@index([userId])
  @@index([eventType])
  @@index([timestamp])
}

// Subscription and Payment Tracking
model subscriptions {
  id              String    @id @default(cuid())
  userId          String    @unique
  tier            String    // free, premium
  status          String    // active, cancelled, expired
  startDate       DateTime  @default(now())
  endDate         DateTime?
  monthlyPrice    Float?
  stripeSubscriptionId String?
  user            users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}
